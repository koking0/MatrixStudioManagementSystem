# Generated by Django 2.2.5 on 2020-04-03 01:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('RBAC', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(default='avatars/default.png', upload_to='avatars/')),
                ('telephone', models.CharField(blank=True, max_length=11, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QQ', models.IntegerField(verbose_name='班级QQ群')),
                ('startDate', models.DateField(verbose_name='开课日期')),
                ('graduateDate', models.DateField(blank=True, null=True, verbose_name='结业日期')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='说明')),
                ('classTeacher', models.ForeignKey(help_text='班主任为成员管理部成员，负责督促老师课程制作进度和学生学习进度', on_delete=django.db.models.deletion.PROTECT, to='RBAC.RbacUserInfo', verbose_name='班主任')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='项目名称')),
                ('price', models.IntegerField(verbose_name='项目报价')),
                ('introduce', models.TextField(verbose_name='项目介绍')),
                ('contactName', models.CharField(max_length=32, verbose_name='联系人姓名')),
                ('contactInformation', models.CharField(help_text='QQ/WeChat/Phone', max_length=64, verbose_name='联系人联系方式')),
                ('startDate', models.DateField(blank=True, null=True, verbose_name='接取日期')),
                ('completeDate', models.DateField(blank=True, null=True, verbose_name='完结日期')),
                ('chargePerson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='RBAC.RbacUserInfo', verbose_name='项目负责人')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QQ', models.CharField(max_length=32, verbose_name='学生QQ')),
                ('telephone', models.CharField(max_length=32, verbose_name='学生手机号')),
                ('state', models.IntegerField(choices=[(1, '审核'), (2, '在读'), (3, '毕业')], default=1, verbose_name='学生状态')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('classList', models.ManyToManyField(blank=True, to='index.Classes', verbose_name='已报班级')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='学生信息')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='跟进内容')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='跟进日期')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='index.Project', verbose_name='跟进项目')),
                ('superintendent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='RBAC.RbacUserInfo', verbose_name='跟进人')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, '学费'), (2, '项目款'), (3, '其它')], verbose_name='账单类型')),
                ('price', models.IntegerField(verbose_name='金额')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='账单日期')),
                ('state', models.IntegerField(choices=[(1, '审核中'), (2, '确认'), (3, '驳回')], verbose_name='状态')),
                ('confirmDate', models.DateTimeField(blank=True, null=True, verbose_name='确认日期')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('confirmUser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='RBAC.RbacUserInfo', verbose_name='审批人')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='付款人')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='课程名称')),
                ('sketch', models.TextField(verbose_name='课程简述')),
                ('price', models.PositiveIntegerField(help_text='游客学习收费，工作室成员学习免费', verbose_name='学费')),
                ('cover', models.ImageField(default='courseCover/default.png', upload_to='courseCover/', verbose_name='课程封面')),
                ('grade', models.IntegerField(choices=[(1, 'M1'), (2, 'M2'), (3, 'M3'), (4, 'M4'), (5, 'M5')], verbose_name='课程等级')),
                ('category', models.IntegerField(choices=[(1, '算法'), (2, '前端'), (3, '后端'), (4, 'AI'), (5, '其它')], verbose_name='课程分类')),
                ('assistant', models.ManyToManyField(help_text='助教限定为M3等级成员', related_name='assistant', to='RBAC.RbacUserInfo', verbose_name='助教')),
                ('teacher', models.ForeignKey(help_text='开课老师限制为M4、M5等级成员', on_delete=django.db.models.deletion.PROTECT, related_name='teacher', to='RBAC.RbacUserInfo', verbose_name='开课老师')),
            ],
        ),
        migrations.AddField(
            model_name='classes',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='index.Course', verbose_name='课程'),
        ),
    ]
